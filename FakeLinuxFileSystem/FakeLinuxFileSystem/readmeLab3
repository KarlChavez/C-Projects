Name: Karl Chavez

Instructions:
1. When you start the program by typing "make" or "lab3", it will ask the user to type in a command. Don't worry about inputting a wrong command as the program will let you know if it is an invalid command.

2. Type a command like you would on linux. One crucial thing to note is that commands that take file/directory should have the names after the command and not the command just itself. For example, typing "rmdir" without any leading names will cause errors because my program expects the string to have the file names afterwards. "rmdir" isn't valid but "rmdir folder1" is valid! Vice versa if a command doesn't take file/directory names after the command. For example, "ls folder1" isn't valid but "ls" alone is valid. 

3. Similar to #2 instruction, commands that only take in one name shouldn't have multiple names. For example, "cd" expects only one directory name after. "cd folder1 folder 2" is invalid but "cd folder1" is valid!

4. To quit the program, simply type "quit". 

I certify that I completed all of the work myself with no aid from anyone aside from the instructor or the undergraduate graders.

Part 1:

Q1: My file system structure differs as mine was a doubly linked list instead of a one direction list we discussed in class. Furthermore, there were much more data contained inside my nodes. In my node, the data I had were the name of the file/directory, text file, an integer value to differentiate a directory and a file, an integer value to keep track of the size of directory and four pointers.

Q2: I have made my program to where it will notify the user if the current directory is empty. It does so by checking if the node has a size value of 0. If it is, then it tells the user that the directory is empty (no children), rather than simply printing nothing.

Q3: "terse" is possible because I used it in all my insertion and deletion functions! I understood the code for terse linked list and utilized it throughout my program. Debugging the terse link could sometimes be frustrating, but it's easy if you keep track of where the pointer is pointing to. Overall, terse linked list made my program run smoothly as I didn't have to worry about special cases!

Part 2:

Q1: The three commands I chose to implement in my program are "clear", "reset", and "info". I did clear because first of, its extremely easy to code up and second, it is one of my most used command. The number 1 thing I hate when I code is having a cluttered screen and using the unix command "clear" helps my brain from not exploding. The reason I did "reset" was first, it was easy to code,and second, I wanted the user to have a fresh start if the directories get overly complex. Having this "reset" feature makes it easy to start from scratch. Finally, I wanted the user to know how many files and directories there are in their current directory. The command ls only prints out what's inside the directory but not the number of files and directories. This is an upgraded verson of ls.

Q2: When implementing my two simple commands "clear" and "reset", I didn't have to use any other data structures because they were fairly straight to the point. On the other hand, "info" was very similar in structure to "ls". I reused the code in "ls" and modified it to when the pointer traverses through the doubly linked data structure, it checks the int value of the node to determine whether it is a directory or a file.

Q3: I wanted to display the directory structure in a clean and simple manner. It would print out the directories from left to right and its children. The first directory that the pointer encounters is the first one that will have its children outputted. If a directory is empty, then it would just simply print nothing. The program prints the directory first, and then the contents right after the colon. The structure works through recursion. Once the pointer encounters a directory, then it simply calls the function itself while having the address of that directory the argument. 

Part 3:

Q1: Instructions after my name.

Q2: When a directory has more than 64 items, it will simply not let you add more directories or files. The program will output that the current directory is full. If you remove a directory or a file using the commands "rmdir" or "rm", then it will allow you to add more. My program checks the integer size value to determine if you can add things onto the directory. 

Q3: 

mkdir <name> <name> ...
file
cd <name>

The first two commands will let you add directories and files into the current directory. The third command will let you change directories and add items to that directory to test if the directory childrens can hold 64 items. 


Q4: Truthfully, I wasn't able to complete this part of the lab. Just because of time sake. This lab was difficult but very fun building it! While the command line arguments functionality isn't here in this project, I will still continue to work on this because I would like to show it on my resume :)    
