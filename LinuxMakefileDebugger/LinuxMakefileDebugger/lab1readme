Name: Karl Chavez

I certify that I completed all of the work myself with no aid from anyone aside from the instructor or the undergraduate graders.

Part 1: A quick and easy C program

Q1: To create a new directory called "lab1", you would need to type "mkdir lab1". To move your files into that directory, you simply would need to type "mv " + the names of each files with a space in between each one + " " + "lab1". This will move the files that you stated to lab1 directory. 

Q2: Typing "ls -alrt" will give you a full list of your files in your current directory including the hidden files. The "ls" gives you a long list with extra information such as permission, modification date, etc. 

Q3:
Typing "cd" and "cd ~" takes you to your 'home directory'.
Typing "cd ." will return you to your current working directory. 
Typing "cd .." will get you one level up from your current position.

Part 2: Makefiles

Q1: Something did happen. When you run "make -r", it depends on the modification date and time and since tags never existed when we unzipped the file, the make file will run the target commands. 

Q2: Something did happen. When I inputted "touch custom header.h", nothing happened on the terminal. However, when I ran "make -r" again, the terminal is outputting "gcc -ansi -pedantic -Wimplicit-function-declaration -Wreturn-type -g -c lab1.c -o lab1.o"

Q3: (Lab inputs)

Q4: (Lab inputs)

Q5: When you go inside the numbers file, you will see that all the files is organized by date from newest down to oldest. Doing this organizes the modification date. Makefile should be in the dependency list, but whenever makefile is edited, the numbers command will be run.

Part 3: Debugging

Q1: When running the next command, the next doesn't actually perform or run code. It will just show the next line that would be ran. I know this because the value of the print statement is outputted after you type "next". 

Q2: When I first printed out i, the value is 0. That is because the variable hasn't been assigned to anything yet. When I printed it out again, the value of i was 1. That is because we ran "i = INIT" which "INIT" is assigned to 1. Lastly, the last value that was printed was 5. That is because we set the variable i to equal 5 and so it will print the value of i to 5. Setting the variable changed the output because we are reassigning i to 5. 

Q3: To step into the function, you will need to input "next" until the function is present in the terminal. Once it is printed in the terminal, you will need to input "step" and it will run the function. 

Q4: The value of i didn't change but the statement "which is" changed from odd to even. The reason the variable i didn't change is because it is in the main function. We only changed the x variable which is in the parameter of the function and changed the output from odd to even. 

Q5: The line that crashed the code was #23. The error was caused because of a divide by 0 error. 

Q6: To fix the divide by error, you would need to change the for loop to i=>0 to i>0 so the loop doesn't continue when the variable equals 0. The gdb was faster when trying to find the error. Knowing what the error was, it was faster to find it in the code. 

